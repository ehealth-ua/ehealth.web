"""
Legal Entity contains data about medical service providers, pharamcies and MISes.
In order to obtain details user must have a scope `legal_entity:read`.

NHS admin can verify Legal Entity having a scope `legal_entity:nhs_verify`.
Also it's possible to deactivate Legal Entity having a scope `legal_entity:deactivate`
"""
type LegalEntity {
  id: ID!
  "full official name of legal entity also the name to show on public sources [as map, portal etc]"
  name: String!
  shortName: String
  publicName: String
  type: LegalEntityType!
  "Unified Register of Businesses and Organizations"
  edrpou: String!
  status: LegalEntityStatus!
  addresses: [Address]!
  phones: [Phone]!
  "email to contact person in charge from legal entity"
  email: String!
  "Ukrainian Industry Classification System, there is a check that at least one of next kveds is input: 86.10, 86.21, 47.73."
  kveds: [String]!
  "Dictionary OWNER_PROPERTY_TYPE State or private type of legal entity"
  ownerPropertyType: String!
  "Dictionary LEGAL_FORM - business form [as ТОВ/ФОП/ДП/КП]"
  legalForm: String!
  medicalServiceProvider: medicalServiceProvider!
  misVerified: MisVerified!
  nhsVerified: Boolean
  "legal entity website"
  website: String
  "treasury registration code [Код одержувача/розпорядника бюджетних коштів для Казначейства. Вказується за наявності.]"
  receiverFundsCode: String
  "legal owner of legal entity [нформація про власника ЗОЗ, для ФОП не заповнюється]"
  beneficiary: String
  archive: Archive
  insertedAt: DateTime! @fake(locale: "uk", method: "date.past")
  "employee with employee_type='OWNER and isActive=true"
  owner: Employee!
  # employees: [Employee]!
  # divisions: [Division]
  mergedFromLegalEntities(
    filter: LegalEntityLegacyConnectionFilter
    sort: LegalEntityLegacyConnectionOrderBy
  ): [LegalEntityLegacyConnection]
}

enum LegalEntityType {
  MIS
  MSP
  PHARMACY
}

enum LegalEntityStatus {
  ACTIVE
  CLOSED
}

enum MisVerified {
  VERIFIED
  NOT_VERIFIED
}

type License {
  licenseNumber: String
  issuedBy: String!
  issuedDate: Date! @fake(locale: "uk", method: "date.past", args: [100])
  expiryDate: Date @fake(locale: "uk", method: "date.past", args: [100])
  activeFromDate: Date! @fake(locale: "uk", method: "date.past", args: [100])
  whatLicensed: String
  orderNo: String!
}

type Accreditation {
  category: String!
  issued_date: Date @fake(locale: "uk", method: "date.past", args: [100])
  expiry_date: Date @fake(locale: "uk", method: "date.past", args: [100])
  order_no: String!
  order_date: Date @fake(locale: "uk", method: "date.past", args: [100])
}

type medicalServiceProvider {
  licenses: [License]
  accreditation: Accreditation
}

input LegalEntityFilter {
  nhsVerified: Boolean
  area: String
  settlement: String
}

enum LegalEntityOrderBy {
  edrpou_ASC
  edrpou_DESC
  status_ASC
  status_DESC
  nhsVerified_ASC
  nhsVerified_DESC
  insertedAt_ASC
  insertedAt_DESC
}

type Archive {
  "the date when paper documents were transferred to archive"
  date: Date @fake(locale: "uk", method: "date.past", args: [100])
  "the address of building where paper documents are"
  place: String
}

type LegalEntityLegacyConnection {
  mergedFromLegalEntity: LegalEntity
  isActive: Boolean
  base: String!
  insertedAt: DateTime! @fake(locale: "uk", method: "date.past")
}

input LegalEntityLegacyConnectionFilter {
  edrpou: String!
}

enum LegalEntityLegacyConnectionOrderBy {
  edrpou_ASC
  edrpou_DESC
  isActive_ASC
  isActive_DESC
  insertedAt_DESC
  insertedAt_ASC
}
