"""
This is Person (MPI) details. In order to obtain details user must have a scope **person:read**
"""
type Person {
  id: ID!
  firstName: String! @fake(locale: "uk", method: "name.firstName", args: [1])
  lastName: String! @fake(locale: "uk", method: "name.lastName", args: [1])
  secondName: String @fake(locale: "uk", method: "name.firstName", args: [0])
  birthDate: Date! @fake(locale: "uk", method: "date.past", args: [100])
  gender: PersonGender!
  status: PersonStatus!
  birthCountry: String!
  birthSettlement: String!
  "the unique number in Unified State Register"
  unzr: String
  taxId: String
    @fake(
      locale: "uk"
      method: "random.number"
      args: [{ min: 1000000000, max: 9999999999 }]
    )
  authenticationMethod: [AuthenticationMethod]!
  documents: [Document]
  attachedDocuments: [attachedDocuments]
  insertedAt: DateTime! @fake(locale: "uk", method: "date.past")
  addresses: [Address]!
  "the way how a patient wants to be reached"
  preferredWayCommunication: PersonPreferredWayCommunication
  phones: [Phone]
  declarations(
    filter: DeclarationFilter
    orderBy: DeclarationOrderBy
  ): [Declaration]
}

enum PersonStatus {
  ACTIVE
  INACTIVE
}

enum PersonGender {
  MALE
  FEMALE
}

enum PersonPreferredWayCommunication {
  EMAIL
  PHONE
}

enum PersonAuthenticationMethodType {
  OTP
  OFFLINE
  NA
}

type AuthenticationMethod {
  type: PersonAuthenticationMethodType!
  phoneNumber: String
}

type Document {
  "Dictionary DOCUMENT_TYPE"
  type: String
  "document issue number"
  number: String
  "authority which issued the document"
  issuedBy: String @fake(locale: "uk", method: "company.companyName")
  "the date when document was issued"
  issuedAt: Date @fake(locale: "uk", method: "date.past")
}

type attachedDocuments {
  type: String!
  url: String!
}

input PersonFilter {
  taxId: String
  unzr: String
  phoneNumber: String
  personal: PersonPersonalFilter
}

input PersonPersonalFilter {
  firstName: String!
  lastName: String!
  birthDate: Date! @fake(locale: "uk", method: "date.past", args: [100])
}

enum PersonOrderBy {
  taxId_ASC
  taxId_DESC
  unzr_ASC
  unzr_DESC
  birthDate_ASC
  birthDate_DESC
  insertedAt_ASC
  insertedAt_DESC
}
